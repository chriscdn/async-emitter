{"version":3,"file":"async-emitter.cjs","sources":["../src/index.ts"],"sourcesContent":["class AsyncEmitter<\n    Events extends Record<string, (...args: any[]) => any>,\n> {\n    private listeners = new Map<keyof Events, Set<Events[keyof Events]>>();\n\n    // Register an event listener\n    on<K extends keyof Events>(event: K, listener: Events[K]): void {\n        if (!this.listeners.has(event)) {\n            this.listeners.set(event, new Set());\n        }\n\n        this.listeners.get(event)!.add(listener);\n    }\n\n    // Remove an event listener\n    off<K extends keyof Events>(event: K, listener: Events[K]): void {\n        this.listeners.get(event)?.delete(listener);\n    }\n\n    // Emit an event and await all async listeners\n    emit<K extends keyof Events>(\n        event: K,\n        ...args: Parameters<Events[K]>\n    ): Promise<ReturnType<Events[K]>[]> {\n        const handlers = this.listeners.get(event) ?? [];\n\n        return Promise.all(\n            [...handlers].map((handler) => handler(...args)),\n        );\n    }\n\n    // Remove all listeners for an event\n    removeAllListeners<K extends keyof Events>(event: K): void {\n        this.listeners.delete(event);\n    }\n}\n\nexport { AsyncEmitter };\n"],"names":["AsyncEmitter","this","listeners","Map","_proto","prototype","on","event","listener","has","set","Set","get","add","off","_this$listeners$get","emit","_this$listeners$get2","_arguments","arguments","handlers","Promise","all","concat","map","handler","apply","slice","call","removeAllListeners"],"mappings":"sDAAkBA,IAAAC,KAGNC,UAAY,IAAIC,GAA8C,CAAA,IAAAC,EAAAJ,EAAAK,UA+BrEL,OA/BqEI,EAGtEE,GAAA,SAA2BC,EAAUC,GAC5BP,KAAKC,UAAUO,IAAIF,IACpBN,KAAKC,UAAUQ,IAAIH,EAAO,IAAII,KAGlCV,KAAKC,UAAUU,IAAIL,GAAQM,IAAIL,EACnC,EAACJ,EAGDU,IAAA,SAA4BP,EAAUC,OAAmBO,EACrDA,OAAAA,EAAAd,KAAKC,UAAUU,IAAIL,KAAnBQ,SAAkCP,EACtC,EAACJ,EAGDY,KAAA,SACIT,OAC8BU,EAAAC,EAAAC,UAExBC,SAAQH,EAAGhB,KAAKC,UAAUU,IAAIL,IAAMU,EAAI,GAE9C,OAAOI,QAAQC,IACX,GAAAC,OAAIH,GAAUI,IAAI,SAACC,GAAO,OAAKA,EAAOC,WAAAC,EAAAA,GAAAA,MAAAC,KAAAV,EAAQ,GAAC,GAEvD,EAACd,EAGDyB,mBAAA,SAA2CtB,GACvCN,KAAKC,UAAS,OAAQK,EAC1B,EAACP,CAAA"}