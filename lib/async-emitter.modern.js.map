{"version":3,"file":"async-emitter.modern.js","sources":["../src/index.ts"],"sourcesContent":["class AsyncEmitter<\n    Events extends Record<string, (...args: any[]) => any>,\n> {\n    private listeners = new Map<keyof Events, Set<Events[keyof Events]>>();\n\n    // Register an event listener\n    on<K extends keyof Events>(event: K, listener: Events[K]): void {\n        if (!this.listeners.has(event)) {\n            this.listeners.set(event, new Set());\n        }\n\n        this.listeners.get(event)!.add(listener);\n    }\n\n    // Remove an event listener\n    off<K extends keyof Events>(event: K, listener: Events[K]): void {\n        this.listeners.get(event)?.delete(listener);\n    }\n\n    // Emit an event and await all async listeners\n    emit<K extends keyof Events>(\n        event: K,\n        ...args: Parameters<Events[K]>\n    ): Promise<ReturnType<Events[K]>[]> {\n        const handlers = this.listeners.get(event) ?? [];\n\n        return Promise.all(\n            [...handlers].map((handler) => handler(...args)),\n        );\n    }\n\n    // Remove all listeners for an event\n    removeAllListeners<K extends keyof Events>(event: K): void {\n        this.listeners.delete(event);\n    }\n}\n\nexport { AsyncEmitter };\n"],"names":["AsyncEmitter","constructor","listeners","Map","on","event","listener","this","has","set","Set","get","add","off","_this$listeners$get","delete","emit","args","_this$listeners$get2","handlers","Promise","all","map","handler","removeAllListeners"],"mappings":"AAAA,MAAMA,EAAYC,WAAAA,QAGNC,UAAY,IAAIC,GAA8C,CAGtEC,EAAAA,CAA2BC,EAAUC,GAC5BC,KAAKL,UAAUM,IAAIH,IACpBE,KAAKL,UAAUO,IAAIJ,EAAO,IAAIK,KAGlCH,KAAKL,UAAUS,IAAIN,GAAQO,IAAIN,EACnC,CAGAO,GAAAA,CAA4BR,EAAUC,OAAmBQ,EACrDA,OAAAA,OAAKZ,UAAUS,IAAIN,KAAnBS,EAA2BC,OAAOT,EACtC,CAGAU,IAAAA,CACIX,KACGY,GAA2B,IAAAC,EAE9B,MAAMC,EAAoCD,OAA5BA,EAAGX,KAAKL,UAAUS,IAAIN,IAAMa,EAAI,GAE9C,OAAOE,QAAQC,IACX,IAAIF,GAAUG,IAAKC,GAAYA,KAAWN,IAElD,CAGAO,kBAAAA,CAA2CnB,GACvCE,KAAKL,UAAUa,OAAOV,EAC1B"}